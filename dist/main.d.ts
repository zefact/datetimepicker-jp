type Options = {
    pickDate: boolean;
    pickTime: boolean;
    showSeconds: boolean;
    minutesStep: number;
    secondsStep: number;
    viewMode: number;
    startViewMode: number;
    minViewMode: number;
    weekStart: number;
    isInput: boolean;
    formatMode: number;
    minDate?: any;
    maxDate?: any;
    element?: HTMLElement;
    widget?: HTMLElement;
    workingHolidays?: [string];
};
export default class DateTimePicker {
    private options;
    private JpDates;
    private currentDate;
    private viewDate;
    constructor(element: HTMLElement, options?: Partial<Options>);
    init(element: HTMLElement, options?: Partial<Options>): void;
    showMode(dir?: number): void;
    showTimePicker(mode: number): void;
    getDaysInMonth(year: number, month: number): number;
    formatDate(date: Date): string;
    createRegExp(): RegExp;
    parseStringToDate(dateString: string): Date;
    truncateTimeToDate(date: Date): Date;
    truncateMinuteToDate(date: Date): Date;
    fillDow(): void;
    fillMonths(): void;
    fillDate(): void;
    addCustomHoliday(holiday: [string]): void;
    fillHours(): void;
    fillMinutes(): void;
    fillSeconds(): void;
    fillTime(): void;
    insertDateTimeIntoInput(): void;
    attachPickerEvents(): void;
    clickEvent(e: Event): void;
    stopEvent(e: Event): void;
    focusEvent(): void;
    focusoutEvent(): void;
    validateAndUpdate(): void;
    adjustPlace(): void;
    setTemplate(): HTMLElement;
    getTimePickerTemplate(): string;
    getDatePickerTemplate(): string;
    setOptions(options?: Partial<Options>): void;
}
export {};
